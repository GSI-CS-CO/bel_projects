###############################################################################
##                                                                           ##
##  Common include makefile for SCU integrated soft core processor LM32      ##
##                                                                           ##
##---------------------------------------------------------------------------##
## File:    makefile.scu                                                     ##
## (c):     GSI Helmholtz Centre for Heavy Ion Research GmbH                 ##
## Author:  Ulrich Becker                                                    ##
## Date:    17.12.2018                                                       ##
###############################################################################
ifndef MIAN_MODULE
   $(error Variable MAIN_MODULE is not defined, it includes \
the source-filename which contains the function "main"! )
endif
ifndef REPOSITORY_DIR
   $(error Variable REPOSITORY_DIR is not defined, it includs the path \
to the folder .../syn/)
endif
VERSION       ?= "1.0.0"
PRINT_BUFSIZE ?= 128
USRCPUCLK     ?= 125000
RAM_SIZE      ?= 147456
STACK_SIZE    ?= 10240
TARGET        ?= $(notdir $(basename $(MIAN_MODULE)))
BUILD_ID_FILE ?= $(TARGET)_$(BUILDID_NAME).c
LINKER_SCRIPT ?= $(TARGET).ld

MAKEFILE_DIR ?= $(REPOSITORY_DIR)/makefiles

INCLUDED_TOOLCHAIN_DIR = $(REPOSITORY_DIR)/toolchain/bin/

# If the variable TOOLCHAIN_DIR not defined and a installed toolchain can be
# found in the environment variable $PATH, then this toolchain will preferred,
# otherwise the included toolchain of this repository will used.
ifndef TOOLCHAIN_DIR
 TOOLCHAIN_DIR := $(shell ([ -n "$$(which $(CROSS_COMPILE)gcc 2>/dev/null)" ]\
                             || echo $(INCLUDED_TOOLCHAIN_DIR) ))
endif

include $(MAKEFILE_DIR)/scu_dirs.inc

INCLUDE_DIRS += $(WR_DIR)/include
INCLUDE_DIRS += $(GENERATED_DIR)

ifdef USE_RTOS
  include $(MAKEFILE_DIR)/makefile.rtos
endif

STARTUP_CODE ?= $(REPOSITORY_DIR)/modules/lm32_stub/crt0ScuLm32.S

SOURCE += $(STARTUP_CODE)
SOURCE += $(REPOSITORY_DIR)/modules/lm32_stub/stubs.c

SOURCE += $(GENERATED_DIR)/$(BUILD_ID_FILE)

SOURCE += $(SCU_LIB_SRC_DIR)/mini_sdb.c
SOURCE += $(SCU_LIB_SRC_DIR)/sdb_add.c
SOURCE += $(SCU_LIB_SRC_DIR)/mprintf.c

SOURCE += $(WR_DIR)/dev/w1.c
SOURCE += $(WR_DIR)/dev/w1-hw.c
SOURCE += $(WR_DIR)/dev/uart.c
SOURCE += $(WR_DIR)/dev/devicelist.c
SOURCE += $(WR_DIR)/dev/syscon.c
SOURCE += $(WR_DIR)/lib/usleep.c
ifdef USE_LINUX_PRINTF
 SOURCE += $(WR_DIR)/pp_printf/printf.c
# SOURCE += $(WR_DIR)/pp_printf/vsprintf-mini.c #
 SOURCE += $(WR_DIR)/pp_printf/vsprintf-full.c
 SOURCE += $(WR_DIR)/pp_printf/div64.c
 DEFINES += CONFIG_USE_LINUX_PRINTF
endif

SOURCE += $(WR_DIR)/sdb-lib/glue.c



DEFINES += CONFIG_WR_NODE
DEFINES += CONFIG_PRINT_BUFSIZE=$(PRINT_BUFSIZE)
DEFINES += SDBFS_BIG_ENDIAN
DEFINES += USRCPUCLK=$(USRCPUCLK)

DOX_GEN_GROUP_NAME ?= GENERATED_SOURCE

CFLAGS += -nostdlib
CFLAGS += -mmultiply-enabled
CFLAGS += -mbarrel-shift-enabled

RAM_OFFS      ?= 0x10000000
BOOTL_SIZE    ?= 0x100
BUILDID_SIZE  ?= 0x400
BUILDID_NAME  ?= buildid
BUILDID_START = $(shell printf "0x%x" $(BOOTL_SIZE))
SHARED_START  = $(shell printf "0x%x" $$(( $(BUILDID_START) + $(BUILDID_SIZE) )) )
INTADR_OFFS   = $(shell printf "0x%x" $(RAM_OFFS))
END_RAM_NAME  ?= _endram


ifdef SHARED_SIZE
   SHARED = "$(SHARED_SIZE)"
else
   SHARED = "0"
   SHARED_SIZE = 0
endif
SHARED_NAME ?= shared

RESERVED_MEM_SIZE = $(shell echo $$(($(BOOTL_SIZE)+$(BUILDID_SIZE)+$(SHARED_SIZE)+$(STACK_SIZE))) )
USABLE_MEM_SIZE   = $(shell echo $$(($(RAM_SIZE)-$(STACK_SIZE))) )

COMMENT_TEXT := This file has been created automatically, do not modify it by hand!
DATE         := $(shell date)
AUTHOR       := makefile.scu

LDS_LIBS   = c
LDS_LIBS  += gcc
# LDS_LIBS  += gloss   # library for GNU Low-level OS Support
# LDS_LIBS  += nosys   # Some OS dummy-functions

LDS  = "/*!\n"
LDS += " * @defgroup $(DOX_GEN_GROUP_NAME)\n"
LDS += " * @{\n"
LDS += " * @file $(LINKER_SCRIPT)\n"
LDS += " * @brief $(CPU)-Linkerscript for target: $(TARGET)\n"
LDS += " * @note $(COMMENT_TEXT)\n"
LDS += " * @date $(DATE)\n"
LDS += " * @author $(AUTHOR)\n"
LDS += " */\n\n"
LDS += "OUTPUT_FORMAT(\"elf32-$(CPU)\")\n"
LDS += "GROUP( $(addprefix -l,$(LDS_LIBS)) )\n"
LDS += "ENTRY(_reset_handler)\n"
LDS += "\nMEMORY\n"
LDS += "{\n"
LDS += "   ram(rwx):\n"
LDS += "      ORIGIN = $(RAM_OFFS),\n"
LDS += "      LENGTH = $(RAM_SIZE) - $(STACK_SIZE)\n\n"
LDS += "   stack(rw):\n"
LDS += "      ORIGIN = $(RAM_OFFS) + $(RAM_SIZE) - $(STACK_SIZE),\n"
LDS += "      LENGTH = $(STACK_SIZE)\n"
LDS += "} /* End of MEMORY */\n\n"
LDS += "SECTIONS\n"
LDS += "{\n"
LDS += "   . = ORIGIN(ram);\n\n"
LDS += "   /* First location in stack is highest address in RAM */\n"
LDS += "   PROVIDE(_fstack = ORIGIN(stack) + LENGTH(stack) - $(MEM_ALIGN));\n"
LDS += "   PROVIDE($(END_RAM_NAME) = ORIGIN(stack));\n\n"
LDS += "   .boot :\n"
LDS += "   {\n"
LDS += "      _fboot = .;\n"
LDS += "      *(.boot);\n"
LDS += "      _eboot = .;\n"
LDS += "   } > ram\n\n"
LDS += "   /* Begin of build-id array defined in \"$(GENERATED_DIR)/$(BUILD_ID_FILE)\" */\n"
LDS += "   .$(BUILDID_NAME) ADDR(.boot) + $(BOOTL_SIZE) :\n"
LDS += "   {/*\n"
LDS += "     * The build-id array has to be preserved in any cases,\n"
LDS += "     * doesn't matter whether the compiler option -fdata-sections and\n"
LDS += "     * linker option --gc-sections are set or not.\n"
LDS += "     */\n"
LDS += "      KEEP(*(.$(BUILDID_NAME) .$(BUILDID_NAME).*))\n"
LDS += "      _f$(BUILDID_NAME) = .;\n"
LDS += "      *(.$(BUILDID_NAME) .$(BUILDID_NAME).*) _e$(BUILDID_NAME) = .;\n"
LDS += "   } > ram\n\n"
LDS += "   /* Begin of shared memory */\n"
LDS += "   .$(SHARED_NAME) ADDR(.$(BUILDID_NAME)) + $(BUILDID_SIZE) :\n"
LDS += "   {\n"
LDS += "      _f$(SHARED_NAME) = .;\n"
LDS += "      PROVIDE(_start$(SHARED_NAME) = .);\n"
LDS += "      *(.$(SHARED_NAME) .$(SHARED_NAME).*) _e$(SHARED_NAME) = .;\n"
LDS += "   } > ram\n\n"
LDS += "   /* Begin of code */\n"
LDS += "   .text  ADDR(.$(SHARED_NAME)) + $(SHARED) :\n"
LDS += "   {\n"
LDS += "     . = ALIGN($(MEM_ALIGN));\n"
LDS += "     _ftext = .;\n"
LDS += "     _ftext_rom = LOADADDR(.text);\n"
LDS += "     *(.text .stub .text.* .gnu.linkonce.t.*)\n"
LDS += "     *(.gnu.warning)\n"
LDS += "     KEEP(*(.init))\n"
LDS += "     KEEP(*(.fini))\n"
LDS += "     /* Constructors and destructors */\n"
LDS += "     KEEP(*crtbegin*.o(.ctors))\n"
LDS += "     KEEP(*(EXCLUDE_FILE (*crtend*.o ) .ctors))\n"
LDS += "     KEEP(*(SORT(.ctors.*)))\n"
LDS += "     KEEP(*(.ctors))\n"
LDS += "     KEEP(*crtbegin*.o(.dtors))\n"
LDS += "     KEEP(*(EXCLUDE_FILE (*crtend*.o ) .dtors))\n"
LDS += "     KEEP(*(SORT(.dtors.*)))\n"
LDS += "     KEEP(*(.dtors))\n"
LDS += "     KEEP(*(.jcr))\n"
LDS += "     _etext = .;\n"
LDS += "   } > ram\n\n"
LDS += "   /* Exception handlers */\n"
LDS += "   .eh_frame_hdr :\n"
LDS += "   {\n"
LDS += "      *(.eh_frame_hdr)\n"
LDS += "   } > ram\n"
LDS += "   .eh_frame :\n"
LDS += "   {\n"
LDS += "      KEEP (*(.eh_frame))\n"
LDS += "   } > ram\n"
LDS += "   .gcc_except_table :\n"
LDS += "   {\n"
LDS += "      *(.gcc_except_table)\n"
LDS += "      *(.gcc_except_table.*)\n"
LDS += "   } > ram\n\n"
LDS += "   /* Read-only data */\n"
LDS += "   .rodata :\n"
LDS += "   {\n"
LDS += "     . = ALIGN($(MEM_ALIGN));\n"
LDS += "     _frodata = .;\n"
LDS += "     _frodata_rom = LOADADDR(.rodata);\n"
LDS += "     *(.rodata .rodata.* .gnu.linkonce.r.*)\n"
LDS += "     *(.rodata1)\n"
LDS += "     _erodata = .;\n"
LDS += "   } > ram\n\n"
LDS += "   .data :\n"
LDS += "   {\n"
LDS += "      . = ALIGN($(MEM_ALIGN));\n"
LDS += "      _fdata = .;\n"
LDS += "      _fdata_rom = LOADADDR(.data);\n"
LDS += "      *(.data .data.* .gnu.linkonce.d.*)\n"
LDS += "      *(.data1)\n"
LDS += "      SORT(CONSTRUCTORS)\n"
LDS += "      _gp = ALIGN(16) + 0x7ff0;\n"
LDS += "      *(.sdata .sdata.* .gnu.linkonce.s.*)\n"
LDS += "      _edata = .;\n"
LDS += "   } > ram\n\n"
LDS += "   .bss :\n"
LDS += "   {\n"
LDS += "     . = ALIGN($(MEM_ALIGN));\n"
LDS += "     _fbss = .;\n"
LDS += "     *(.dynsbss)\n"
LDS += "     *(.sbss .sbss.* .gnu.linkonce.sb.*)\n"
LDS += "     *(.scommon)\n"
LDS += "     *(.dynbss)\n"
LDS += "     *(.bss .bss.* .gnu.linkonce.b.*)\n"
LDS += "     *(COMMON)\n"
LDS += "     . = ALIGN($(MEM_ALIGN));\n"
LDS += "     _ebss = .;\n"
LDS += "     _end = .;\n"
LDS += "     PROVIDE(end = .);\n"
LDS += "   } > ram = 0\n\n"
ifdef USE_LINUX_PRINTF
LDS += "   PROVIDE(mprintf = pp_printf);\n"
LDS += "   PROVIDE(printf = pp_printf);\n"
LDS += "   PROVIDE(sprintf = pp_sprintf);\n"
LDS += "   PROVIDE(vprintf = pp_vprintf);\n"
LDS += "   PROVIDE(vsprintf = pp_vsprintf);\n"
endif
LDS += "} /* End of SECTIONS */\n"
LDS += "/*!@}*/\n"

CBR_DATE := $$(date +"%a %b %d %H:%M:%S %Z %Y")
CBR_USR  := $$(git config user.name)
CBR_MAIL := $$(git config user.email)
CBR_HOST := $$(hostname)
CBR_GCC  = $$($(CC) --version | grep gcc)
CBR_FLGS = $(CFLAGS)
CBR_KRNL := $$(uname -mrs)
CBR_OS   := $$(lsb_release -d -s | tr -d '"')
CBR_PF   := SCU 3
CBR_GIT1 := $$(git log HEAD~0 --oneline --decorate=no -n 1 | cut -c1-100)
CBR_GIT2 := $$(git log HEAD~1 --oneline --decorate=no -n 1 | cut -c1-100)
CBR_GIT3 := $$(git log HEAD~2 --oneline --decorate=no -n 1 | cut -c1-100)
CBR_GIT4 := $$(git log HEAD~3 --oneline --decorate=no -n 1 | cut -c1-100)
CBR_GIT5 := $$(git log HEAD~4 --oneline --decorate=no -n 1 | cut -c1-100)


CBR  = "/*!\n"
CBR += " * @defgroup $(DOX_GEN_GROUP_NAME)\n"
CBR += " * @{\n"
CBR += " * @file $(BUILD_ID_FILE)\n"
CBR += " * @note $(COMMENT_TEXT)\n"
CBR += " * @date $(DATE)\n"
CBR += " * @author $(AUTHOR)\n"
CBR += " */\n\n"
ifdef EMBEDDED_OS
CBR += "\#include <helper_macros.h>\n"
CBR += "\#include <FreeRTOS.h>\n"
CBR += "\#include <task.h>\n\n"
CBR += "\#define TASK_TICK_RATE_STR TO_STRING( configTICK_RATE_HZ ) \" Hz\"\n"
endif
ifdef ADDITIONAL_HEADDER_IN_BUILD_ID
CBR += "\#define __IN_BUILD_ID__\n"
CBR += "\#include <$(notdir $(ADDITIONAL_HEADDER_IN_BUILD_ID))>\n\n"
endif
CBR += "\#define BUILDID __attribute__((section(\".$(BUILDID_NAME)\"))) "'\\'"\n"
CBR += "                __attribute__((used))\n\n"
CBR += "const char BUILDID build_id_rom[] = \""'\\'"\n"
CBR += "UserLM32"'\\n\\'"\n"
CBR += "Project     : $(TARGET)"'\\n\\'"\n"
CBR += "Version     : $(VERSION)"'\\n\\'"\n"
CBR += "Platform    : $(CBR_PF)"'\\n\\'"\n"
CBR += "Build Date  : $(CBR_DATE)"'\\n\\'"\n"
CBR += "Prepared by : $(USER) $(CBR_USR) <$(CBR_MAIL)>"'\\n\\'"\n"
CBR += "Prepared on : $(CBR_HOST)"'\\n\\'"\n"
CBR += "OS Version  : $(CBR_OS) $(CBR_KRNL)"'\\n\\'"\n"
ifdef EMBEDDED_OS
CBR += "Embedded OS : $(EMBEDDED_OS) "\"tskKERNEL_VERSION_NUMBER\"'\\n\\'"\n"
CBR += "Tick-frequ. : "\" TASK_TICK_RATE_STR \"'\\n\\'"\n"
endif
CBR += "GCC Version : $(CBR_GCC)"'\\n\\'"\n"
CBR += "Opt. level  : $(CODE_OPTIMIZATION), LTO: $(LTO_INFO)"'\\n\\'"\n"
CBR += "IntAdrOffs  : $(INTADR_OFFS)"'\\n\\'"\n"
CBR += "SharedOffs  : $(SHARED_START)"'\\n\\'"\n"
CBR += "SharedSize  : $(SHARED_SIZE)"'\\n\\'"\n"
CBR += "StackSize   : $(STACK_SIZE)"'\\n\\'"\n"
CBR += "FW-ID ROM will contain:"'\\n\\'"\n"
CBR += "   $(CBR_GIT1)"'\\n\\'"\n"
CBR += "   $(CBR_GIT2)"'\\n\\'"\n"
CBR += "   $(CBR_GIT3)"'\\n\\'"\n"
CBR += "   $(CBR_GIT4)"'\\n\\'"\n"
CBR += "   $(CBR_GIT5)"'\\n\\'"\n\";\n\n"
CBR += "/*!@}*/\n"

SHARED_MAP_HEADDER ?= shared_mmap.h


UCTARGET = "_$$(echo $(SHARED_MAP_HEADDER) | tr a-z A-Z | tr '.' '_')"
SMM  = "/*!\n"
SMM += " * @defgroup $(DOX_GEN_GROUP_NAME)\n"
SMM += " * @{\n"
SMM += " * @file $(GENERATED_DIR)/$(SHARED_MAP_HEADDER)\n"
SMM += " * @brief Location of Buildid and Shared Section in LM32 Memory,"
SMM += " to be used by host\n"
SMM += " * @note $(COMMENT_TEXT)\n"
SMM += " * @date $(DATE)\n"
SMM += " * @author $(AUTHOR)\n"
SMM += " */\n\n"
SMM += "\#ifndef $(UCTARGET)\n"
SMM += "\#define $(UCTARGET)\n\n"
SMM += "\#define INT_BASE_ADR  $(RAM_OFFS)      /*!<@brief Address offset of LM32-RAM begin */\n"
SMM += "\#define RAM_SIZE      $(RAM_SIZE)      /*!<@brief Size of entire LM32-RAM in bytes */\n"
SMM += "\#define STACK_SIZE    $(STACK_SIZE)    /*!<@brief Size of LM32-stack in bytes */\n"
SMM += "\#define BUILDID_OFFS  $(BUILDID_START) /*!<@brief Address offset of build ID text string */\n"
SMM += "\#define SHARED_SIZE   $(SHARED_SIZE)   /*!<@brief Maximum size of LM32- shared memory in bytes */\n"
SMM += "\#define SHARED_OFFS   $(SHARED_START)  /*!<@brief Relative address offset of LM32- shared memory */\n\n"
SMM += "\#endif\n"
SMM += "/*!@}*/\n"

#ADDITIONAL_DEPENDENCES += Makefile
ADDITIONAL_DEPENDENCES += $(GENERATED_DIR)/$(SHARED_MAP_HEADDER)
ADDITIONAL_TO_CLEAN    += $(GENERATED_DIR)/$(SHARED_MAP_HEADDER)
ADDITIONAL_TO_CLEAN    += $(GENERATED_DIR)/$(BUILD_ID_FILE)

ADDITIONAL_LD_DEPENDENCES = $(WORK_DIR)/$(LINKER_SCRIPT)

RESULT_FILE = $(TARGET_DIR)/$(TARGET).mif

ADDITIONAL_TO_CLEAN += $(RESULT_FILE)
ADDITIONAL_TO_CLEAN += $(WORK_DIR)/$(LINKER_SCRIPT)

ifndef NO_REMOVE_UNUSED
   CFLAGS += -ffunction-sections
   CFLAGS += -fdata-sections
   LD_FLAGS += -Wl,--gc-sections
endif

LD_FLAGS += -nostdlib

_LD_FLAGS ?= $(LD_FLAGS) -T$(WORK_DIR)/$(LINKER_SCRIPT) $(ARG_LIBS)

# ------------ Additional defines for Doxygen ---------------------------------
DOX_INPUT += $(SCU_LIB_SRC_DIR)/scu_assert.h
DOX_INPUT += $(SCU_LIB_SRC_DIR)/helper_macros.h
DOX_INPUT += $(SCU_LIB_SRC_DIR)/scu_lm32_macros.h
DOX_INPUT += $(SCU_LIB_SRC_DIR)/lm32signal.h
DOX_INPUT += $(GENERATED_DIR)/$(SHARED_MAP_HEADDER)
DOX_INPUT += $(WORK_DIR)/$(LINKER_SCRIPT)
DOX_INPUT += $(MAKEFILE_DIR)/makefile.scu
# -------------- End of defines for Doxygen -----------------------------------

include $(MAKEFILE_DIR)/makefile.lm32

$(GENERATED_DIR)/$(SHARED_MAP_HEADDER): $(GENERATED_DIR)
	echo $(GENERATED_DIR)/$(SHARED_MAP_HEADDER)
	$(QUIET)(printf %b $(SMM)) > $@

$(GENERATED_DIR)/$(BUILD_ID_FILE): $(GENERATED_DIR)
	$(QUIET)(printf %b $(CBR)) > $@

$(WORK_DIR)/$(LINKER_SCRIPT): # $(WORK_DIR)
	$(QUIET)(printf %b $(LDS)) > $@

$(RESULT_FILE): $(BIN_FILE)
	$(GENRAMMIF_F) $(BIN_FILE) $(RAM_SIZE) > $(RESULT_FILE)


# ------------------------ Etherbone- Tools -----------------------------------
ifndef GENRAMMIF
   GENRAMMIF := $(shell which genrammif 2>/dev/null)
   ifeq ($(GENRAMMIF),  )
      GENRAMMIF := $(WR_DIR)/tools/genrammif
   endif
endif

EB_LOAD := $(shell which lm32-fwload.sh 2>/dev/null)
ifeq ($(EB_LOAD), )
   EB_LOAD := $(REPOSITORY_DIR)/tools/scripts/lm32-fwload.sh
endif

EB_RESET := $(shell which scu-reset.sh 2>/dev/null)
ifeq ($(EB_RESET), )
   EB_RESET := $(REPOSITORY_DIR)/tools/scripts/scu-reset.sh
endif
EB_HALT ?= $(EB_RESET)

EB_INFO := $(shell which lm32-info.sh 2>/dev/null)
ifeq ($(EB_INFO), )
   EB_INFO := $(REPOSITORY_DIR)/tools/scripts/lm32-info.sh
endif

ifeq ($(V), 1)
   GENRAMMIF_F = $(GENRAMMIF)
   EB_LOAD_F   = $(EB_LOAD)
   EB_RESET_F  = $(EB_RESET)
   EB_HALT_F   = $(EB_HALT)
else
   GENRAMMIF_F = $(FORMAT_R) $(CPU) "MIF" $(@); $(GENRAMMIF)
   EB_LOAD_F   = $(FORMAT_R) $(CPU) "LOAD" "$(TARGET) -> $(SCU_URL) $(CPU_ID) $(CPU_OFFSET)"; $(EB_LOAD)
   EB_RESET_F  = $(FORMAT_R) $(CPU) "RESET" "$(SCU_URL) $(CPU_ID)"; $(EB_RESET)
   EB_HALT_F   = $(FORMAT_R) $(CPU) "HALT" "$(SCU_URL) $(CPU_ID)"; $(EB_HALT)
endif

.PHONY: show-tools
show-tools:
	$(QUIET) echo $(GENRAMMIF)
	$(QUIET) echo $(EB_LOAD)
	$(QUIET) echo $(EB_RESET)
	$(QUIET) echo $(EB_INFO)

#-------------------------- upload to target SCU ------------------------------
# For developing purposes only.
# SCU_URL can be a Linux environment-variable containing the URL of the
# concerning SCU to develop.
# E.g.:
# export SCU_URL=scuxlXXXX
#
PROTOCOL   ?= tcp
CPU_ID     ?= 0
CPU_OFFSET ?= 0

.PHONY: show-url
show-url:
	$(QUIET) echo "Protocol: $(PROTOCOL), URL: $(SCU_URL), ID: $(CPU_ID), offset: $(CPU_OFFSET)"

.PHONY: check_scu_url
check_scu_url:
ifdef SCU_URL
	$(QUIET)( ping -c1 $(SCU_URL) 2>/dev/null 1>/dev/null; \
	if [ "$$?" != "0" ]; then \
	   echo -e $(ESC_ERROR)"ERROR: Target \"$(SCU_URL)\" defined in SCU_URL not found or doesn't response!"$(ESC_NORMAL) 1>&2;\
	   exit 1; \
	fi; \
	exit 0 \
	)
else
	$(QUIET) echo -e $(ESC_ERROR)"ERROR: Environment variable SCU_URL not defined!"$(ESC_NORMAL) 1>&2
	$(QUIET) exit 1
endif

.PHONY: reset
reset: # check_scu_url
	$(EB_RESET_F) $(PROTOCOL)/$(SCU_URL) cpureset $(CPU_ID)

.PHONY: halt
halt: # check_scu_url
	$(EB_HALT_F) $(PROTOCOL)/$(SCU_URL) cpuhalt $(CPU_ID)

.PHONY: load
load: $(BIN_FILE)
	$(EB_LOAD_F) $(BIN_FILE) $(SCU_URL)

.PHONY: info
info: # check_scu_url
	$(QUIET)$(EB_INFO) $(SCU_URL)

# ------------ End of Etherbone- Tools ----------------------------------------
#=================================== EOF ======================================
