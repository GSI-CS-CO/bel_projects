--! @file        dm_diag_auto.vhd
--  DesignUnit   dm_diag_auto
--! @author      M. Kreider <m.kreider@gsi.de>
--! @date        03/07/2018
--! @version     0.0.1
--! @copyright   2018 GSI Helmholtz Centre for Heavy Ion Research GmbH
--!

--! @brief AUTOGENERATED WISHBONE-SLAVE CORE FOR dm_diag.vhd
--!
--------------------------------------------------------------------------------
--! This library is free software; you can redistribute it and/or
--! modify it under the terms of the GNU Lesser General Public
--! License as published by the Free Software Foundation; either
--! version 3 of the License, or (at your option) any later version.
--!
--! This library is distributed in the hope that it will be useful,
--! but WITHOUT ANY WARRANTY; without even the implied warranty of
--! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--! Lesser General Public License for more details.
--!
--! You should have received a copy of the GNU Lesser General Public
--! License along with this library. If not, see <http://www.gnu.org/licenses/>.
--------------------------------------------------------------------------------

-- ***********************************************************
-- ** WARNING - THIS IS AUTO-GENERATED CODE! DO NOT MODIFY! **
-- ***********************************************************
--
-- If you want to change the interface,
-- modify dm_diag.xml and re-run 'python wbgenplus.py dm_diag.xml' !

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wishbone_pkg.all;
use work.wbgenplus_pkg.all;
use work.genram_pkg.all;
use work.dm_diag_auto_pkg.all;

entity dm_diag_auto is
generic(
  g_cores : natural := 16 --CPU cores
);
Port(
  clk_ref_i                     : std_logic;                            -- Clock input for ref domain
  rst_ref_n_i                   : std_logic;                            -- Reset input (active low) for ref domain
  error_i                       : in  std_logic_vector(1-1 downto 0);   -- Error control
  stall_i                       : in  std_logic_vector(1-1 downto 0);   -- flow control
  stall_cnt_i                   : in  std_logic_vector(32-1 downto 0);  -- Stall time within observation interval in cycles
  stall_cnt_V_i                 : in  std_logic_vector(1-1 downto 0);   -- Valid flag - stall_cnt
  stall_max_ts_i                : in  std_logic_vector(64-1 downto 0);  -- Timestamp of last max update
  stall_max_ts_V_i              : in  std_logic_vector(1-1 downto 0);   -- Valid flag - stall_max_ts
  stall_streak_max_i            : in  std_logic_vector(32-1 downto 0);  -- Observed max continuous stall in cycles
  stall_streak_max_V_i          : in  std_logic_vector(1-1 downto 0);   -- Valid flag - stall_streak_max
  time_dif_neg_i                : in  std_logic_vector(64-1 downto 0);  -- Observed max neg. ECA time difference in ns between ref clock ticks
  time_dif_neg_V_i              : in  std_logic_vector(1-1 downto 0);   -- Valid flag - time_dif_neg
  time_dif_neg_ts_i             : in  std_logic_vector(64-1 downto 0);  -- (approximate) timestamp of last neg dif update
  time_dif_neg_ts_V_i           : in  std_logic_vector(1-1 downto 0);   -- Valid flag - time_dif_neg_ts
  time_dif_pos_i                : in  std_logic_vector(64-1 downto 0);  -- Observed max pos. ECA time difference in ns between ref clock ticks
  time_dif_pos_V_i              : in  std_logic_vector(1-1 downto 0);   -- Valid flag - time_dif_pos
  time_dif_pos_ts_i             : in  std_logic_vector(64-1 downto 0);  -- (approximate) timestamp of last pos dif update
  time_dif_pos_ts_V_i           : in  std_logic_vector(1-1 downto 0);   -- Valid flag - time_dif_pos_ts
  enable_o                      : out std_logic_vector(1-1 downto 0);   -- Enables/disables update. Default is enabled
  reset_o                       : out std_logic_vector(1-1 downto 0);   -- Resets/clears the diagnostic
  stall_observation_interval_o  : out std_logic_vector(32-1 downto 0);  -- Stall observation interval in cycles
  stall_stat_select_o           : out std_logic_vector(8-1 downto 0);   -- Page selector register for Stall observers
  stall_stat_select_RD_o        : out std_logic_vector(1-1 downto 0);   -- Read enable flag - stall_stat_select
  stall_stat_select_WR_o        : out std_logic_vector(1-1 downto 0);   -- Write enable flag - stall_stat_select
  time_observation_interval_o   : out std_logic_vector(64-1 downto 0);  -- TAI time observation interval in ns
  
  ctrl_i                        : in  t_wishbone_slave_in;
  ctrl_o                        : out t_wishbone_slave_out

  
);
end dm_diag_auto;

architecture rtl of dm_diag_auto is

  signal s_pop, s_push                : std_logic;
  signal s_empty, s_full              : std_logic;
  signal r_e_wait, s_e_p              : std_logic;
  signal s_stall                      : std_logic;
  signal s_valid,
         s_valid_ok,
         r_valid_check                : std_logic;
  signal r_ack                        : std_logic;
  signal r_err                        : std_logic;
  signal s_e, r_e, s_w                : std_logic;
  signal s_d                          : std_logic_vector(32-1 downto 0);
  signal s_s                          : std_logic_vector(4-1 downto 0);
  signal s_a                          : std_logic_vector(7-1 downto 0);
  signal s_a_ext,
         r_a_ext0,
         r_a_ext1                     : std_logic_vector(9-1 downto 0);
  signal r_error                      : std_logic_vector(1-1 downto 0)  := std_logic_vector(to_unsigned(0, 1)); -- Error
  signal s_error_i                    : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Error control
  signal s_stall_i                    : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- flow control
  signal r_reset                      : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Resets/clears the diagnostic
  signal r_enable                     : std_logic_vector(1-1 downto 0)  := std_logic_vector(to_unsigned(1, 1)); -- Enables/disables update. Default is enabled
  signal r_time_observation_interval  : std_logic_vector(64-1 downto 0) := (others => '0');                     -- TAI time observation interval in ns
  signal r_time_dif_pos_V             : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - time_dif_pos
  signal s_time_dif_pos_V_i           : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - time_dif_pos
  signal r_time_dif_pos               : std_logic_vector(64-1 downto 0) := (others => '0');                     -- Observed max pos. ECA time difference in ns between ref clock ticks
  signal s_time_dif_pos_i             : std_logic_vector(64-1 downto 0) := (others => '0');                     -- Observed max pos. ECA time difference in ns between ref clock ticks
  signal r_time_dif_pos_ts_V          : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - time_dif_pos_ts
  signal s_time_dif_pos_ts_V_i        : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - time_dif_pos_ts
  signal r_time_dif_pos_ts            : std_logic_vector(64-1 downto 0) := (others => '0');                     -- (approximate) timestamp of last pos dif update
  signal s_time_dif_pos_ts_i          : std_logic_vector(64-1 downto 0) := (others => '0');                     -- (approximate) timestamp of last pos dif update
  signal r_time_dif_neg_V             : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - time_dif_neg
  signal s_time_dif_neg_V_i           : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - time_dif_neg
  signal r_time_dif_neg               : std_logic_vector(64-1 downto 0) := (others => '0');                     -- Observed max neg. ECA time difference in ns between ref clock ticks
  signal s_time_dif_neg_i             : std_logic_vector(64-1 downto 0) := (others => '0');                     -- Observed max neg. ECA time difference in ns between ref clock ticks
  signal r_time_dif_neg_ts_V          : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - time_dif_neg_ts
  signal s_time_dif_neg_ts_V_i        : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - time_dif_neg_ts
  signal r_time_dif_neg_ts            : std_logic_vector(64-1 downto 0) := (others => '0');                     -- (approximate) timestamp of last neg dif update
  signal s_time_dif_neg_ts_i          : std_logic_vector(64-1 downto 0) := (others => '0');                     -- (approximate) timestamp of last neg dif update
  signal r_stall_observation_interval : std_logic_vector(32-1 downto 0) := (others => '0');                     -- Stall observation interval in cycles
  signal r_stall_stat_select_WR       : std_logic_vector(1-1 downto 0)  := std_logic_vector(to_unsigned(0, 1)); -- Write enable flag - stall_stat_select
  signal r_stall_stat_select_RD       : std_logic_vector(1-1 downto 0)  := std_logic_vector(to_unsigned(0, 1)); -- Read enable flag - stall_stat_select
  signal r_stall_stat_select          : std_logic_vector(8-1 downto 0)  := (others => '0');                     -- Page selector register for Stall observers
  signal r_stall_streak_max_V         : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - stall_streak_max
  signal s_stall_streak_max_V_i       : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - stall_streak_max
  signal r_stall_streak_max           : std_logic_vector(32-1 downto 0) := (others => '0');                     -- Observed max continuous stall in cycles
  signal s_stall_streak_max_i         : std_logic_vector(32-1 downto 0) := (others => '0');                     -- Observed max continuous stall in cycles
  signal r_stall_cnt_V                : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - stall_cnt
  signal s_stall_cnt_V_i              : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - stall_cnt
  signal r_stall_cnt                  : std_logic_vector(32-1 downto 0) := (others => '0');                     -- Stall time within observation interval in cycles
  signal s_stall_cnt_i                : std_logic_vector(32-1 downto 0) := (others => '0');                     -- Stall time within observation interval in cycles
  signal r_stall_max_ts_V             : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - stall_max_ts
  signal s_stall_max_ts_V_i           : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Valid flag - stall_max_ts
  signal r_stall_max_ts               : std_logic_vector(64-1 downto 0) := (others => '0');                     -- Timestamp of last max update
  signal s_stall_max_ts_i             : std_logic_vector(64-1 downto 0) := (others => '0');                     -- Timestamp of last max update


begin

  sp : wb_skidpad
  generic map(
    g_adrbits   => 7
  )
  Port map(
    clk_i        => clk_ref_i,
    rst_n_i      => rst_ref_n_i,
    push_i       => s_push,
    pop_i        => s_pop,
    full_o       => s_full,
    empty_o      => s_empty,
    adr_i        => ctrl_i.adr(8 downto 2),
    dat_i        => ctrl_i.dat,
    sel_i        => ctrl_i.sel,
    we_i         => ctrl_i.we,
    adr_o        => s_a,
    dat_o        => s_d,
    sel_o        => s_s,
    we_o         => s_w
  );

  validmux: with to_integer(unsigned(s_a_ext)) select
  s_valid <= 
  s_time_dif_pos_V_i(0)     when c_time_dif_pos_GET_1,    -- 
  s_time_dif_pos_V_i(0)     when c_time_dif_pos_GET_0,    -- 
  s_time_dif_pos_ts_V_i(0)  when c_time_dif_pos_ts_GET_1, -- 
  s_time_dif_pos_ts_V_i(0)  when c_time_dif_pos_ts_GET_0, -- 
  s_time_dif_neg_V_i(0)     when c_time_dif_neg_GET_1,    -- 
  s_time_dif_neg_V_i(0)     when c_time_dif_neg_GET_0,    -- 
  s_time_dif_neg_ts_V_i(0)  when c_time_dif_neg_ts_GET_1, -- 
  s_time_dif_neg_ts_V_i(0)  when c_time_dif_neg_ts_GET_0, -- 
  s_stall_streak_max_V_i(0) when c_stall_streak_max_GET,  -- 
  s_stall_cnt_V_i(0)        when c_stall_cnt_GET,         -- 
  s_stall_max_ts_V_i(0)     when c_stall_max_ts_GET_1,    -- 
  s_stall_max_ts_V_i(0)     when c_stall_max_ts_GET_0,    -- 
  '1'                       when others;
  
  s_valid_ok      <=  r_valid_check and s_valid;
  s_e_p           <=  r_e or r_e_wait;
  s_a_ext         <= s_a & "00";
  s_stall         <= s_full;
  s_push          <= ctrl_i.cyc and ctrl_i.stb and not s_stall;
  s_e             <= not (s_empty or s_e_p);
  s_pop           <= s_valid_ok;
  ctrl_o.stall    <= s_stall;
  
  s_error_i                     <= error_i;
  s_stall_i                     <= stall_i;
  reset_o                       <= r_reset;
  enable_o                      <= r_enable;
  time_observation_interval_o   <= r_time_observation_interval;
  s_time_dif_pos_V_i            <= time_dif_pos_V_i;
  s_time_dif_pos_i              <= time_dif_pos_i;
  s_time_dif_pos_ts_V_i         <= time_dif_pos_ts_V_i;
  s_time_dif_pos_ts_i           <= time_dif_pos_ts_i;
  s_time_dif_neg_V_i            <= time_dif_neg_V_i;
  s_time_dif_neg_i              <= time_dif_neg_i;
  s_time_dif_neg_ts_V_i         <= time_dif_neg_ts_V_i;
  s_time_dif_neg_ts_i           <= time_dif_neg_ts_i;
  stall_observation_interval_o  <= r_stall_observation_interval;
  stall_stat_select_WR_o        <= r_stall_stat_select_WR;
  stall_stat_select_RD_o        <= r_stall_stat_select_RD;
  stall_stat_select_o           <= r_stall_stat_select;
  s_stall_streak_max_V_i        <= stall_streak_max_V_i;
  s_stall_streak_max_i          <= stall_streak_max_i;
  s_stall_cnt_V_i               <= stall_cnt_V_i;
  s_stall_cnt_i                 <= stall_cnt_i;
  s_stall_max_ts_V_i            <= stall_max_ts_V_i;
  s_stall_max_ts_i              <= stall_max_ts_i;
  
  ctrl : process(clk_ref_i)
  begin
    if rising_edge(clk_ref_i) then
      if(rst_ref_n_i = '0') then
        r_e           <= '0';
        r_e_wait      <= '0';
        r_valid_check <= '0';
        r_error                       <= std_logic_vector(to_unsigned(0, 1));
        r_reset                       <= (others => '0');
        r_enable                      <= std_logic_vector(to_unsigned(1, 1));
        r_time_observation_interval   <= (others => '0');
        r_time_dif_pos                <= (others => '0');
        r_time_dif_pos_ts             <= (others => '0');
        r_time_dif_neg                <= (others => '0');
        r_time_dif_neg_ts             <= (others => '0');
        r_stall_observation_interval  <= (others => '0');
        r_stall_stat_select_WR        <= std_logic_vector(to_unsigned(0, 1));
        r_stall_stat_select_RD        <= std_logic_vector(to_unsigned(0, 1));
        r_stall_stat_select           <= (others => '0');
        r_stall_streak_max            <= (others => '0');
        r_stall_cnt                   <= (others => '0');
        r_stall_max_ts                <= (others => '0');
      else
        r_e           <= s_e;
        r_a_ext0      <= s_a_ext;
        r_a_ext1      <= r_a_ext0;
        r_e_wait      <= s_e_p and not s_valid_ok;
        r_valid_check <= (r_valid_check or (s_e_p and not stall_i(0))) and not s_valid_ok;
        r_ack         <= s_pop and not (error_i(0) or r_error(0));
        r_err         <= s_pop and     (error_i(0) or r_error(0));
        ctrl_o.ack    <= r_ack;
        ctrl_o.err    <= r_err;
        
        
        if stall_i = "0" then
          r_error                 <= (others => '0');
          r_reset                 <= (others => '0');
          r_stall_stat_select_RD  <= (others => '0');
          r_stall_stat_select_WR  <= (others => '0');
        end if;
        
        if s_stall_cnt_V_i        = "1" then r_stall_cnt        <= s_stall_cnt_i; end if;         -- 
        if s_stall_max_ts_V_i     = "1" then r_stall_max_ts     <= s_stall_max_ts_i; end if;      -- 
        if s_stall_streak_max_V_i = "1" then r_stall_streak_max <= s_stall_streak_max_i; end if;  -- 
        if s_time_dif_neg_V_i     = "1" then r_time_dif_neg     <= s_time_dif_neg_i; end if;      -- 
        if s_time_dif_neg_ts_V_i  = "1" then r_time_dif_neg_ts  <= s_time_dif_neg_ts_i; end if;   -- 
        if s_time_dif_pos_V_i     = "1" then r_time_dif_pos     <= s_time_dif_pos_i; end if;      -- 
        if s_time_dif_pos_ts_V_i  = "1" then r_time_dif_pos_ts  <= s_time_dif_pos_ts_i; end if;   -- 
        
        
        if(s_e = '1') then
          if(s_w = '1') then
            -- WISHBONE WRITE ACTIONS
            case to_integer(unsigned(s_a_ext)) is
              when c_reset_OWR                      => r_reset                                    <= f_wb_wr(r_reset, s_d, s_s, "owr");                                   -- 
              when c_enable_RW                      => r_enable                                   <= f_wb_wr(r_enable, s_d, s_s, "owr");                                  -- 
              when c_time_observation_interval_RW_1 => r_time_observation_interval(63 downto 32)  <= f_wb_wr(r_time_observation_interval(63 downto 32), s_d, s_s, "owr"); -- 
              when c_time_observation_interval_RW_0 => r_time_observation_interval(31 downto 0)   <= f_wb_wr(r_time_observation_interval(31 downto 0), s_d, s_s, "owr");  -- 
              when c_stall_observation_interval_RW  => r_stall_observation_interval               <= f_wb_wr(r_stall_observation_interval, s_d, s_s, "owr");              -- 
              when c_stall_stat_select_RW           => r_stall_stat_select                        <= f_wb_wr(r_stall_stat_select, s_d, s_s, "owr");                       -- 
              r_stall_stat_select_WR                                                              <= (others     => '1');
              when others                           => r_error                                    <= "1";
            end case;
          else
            -- WISHBONE READ ACTIONS
            case to_integer(unsigned(s_a_ext)) is
              when c_enable_RW                      => null;
              when c_time_observation_interval_RW_1 => null;
              when c_time_observation_interval_RW_0 => null;
              when c_time_dif_pos_GET_1             => null;
              when c_time_dif_pos_GET_0             => null;
              when c_time_dif_pos_ts_GET_1          => null;
              when c_time_dif_pos_ts_GET_0          => null;
              when c_time_dif_neg_GET_1             => null;
              when c_time_dif_neg_GET_0             => null;
              when c_time_dif_neg_ts_GET_1          => null;
              when c_time_dif_neg_ts_GET_0          => null;
              when c_stall_observation_interval_RW  => null;
              when c_stall_stat_select_RW           => null;
              r_stall_stat_select_RD <= (others     => '1');
              when c_stall_streak_max_GET           => null;
              when c_stall_cnt_GET                  => null;
              when c_stall_max_ts_GET_1             => null;
              when c_stall_max_ts_GET_0             => null;
              when others                           => r_error <= "1";
            end case;
          end if; -- s_w
        end if; -- s_e
        
        case to_integer(unsigned(r_a_ext1)) is
          when c_enable_RW                      => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_enable), ctrl_o.dat'length));                                   -- 
          when c_time_observation_interval_RW_1 => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_observation_interval(63 downto 32)), ctrl_o.dat'length));  -- 
          when c_time_observation_interval_RW_0 => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_observation_interval(31 downto 0)), ctrl_o.dat'length));   -- 
          when c_time_dif_pos_GET_1             => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_dif_pos(63 downto 32)), ctrl_o.dat'length));               -- 
          when c_time_dif_pos_GET_0             => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_dif_pos(31 downto 0)), ctrl_o.dat'length));                -- 
          when c_time_dif_pos_ts_GET_1          => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_dif_pos_ts(63 downto 32)), ctrl_o.dat'length));            -- 
          when c_time_dif_pos_ts_GET_0          => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_dif_pos_ts(31 downto 0)), ctrl_o.dat'length));             -- 
          when c_time_dif_neg_GET_1             => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_dif_neg(63 downto 32)), ctrl_o.dat'length));               -- 
          when c_time_dif_neg_GET_0             => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_dif_neg(31 downto 0)), ctrl_o.dat'length));                -- 
          when c_time_dif_neg_ts_GET_1          => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_dif_neg_ts(63 downto 32)), ctrl_o.dat'length));            -- 
          when c_time_dif_neg_ts_GET_0          => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_time_dif_neg_ts(31 downto 0)), ctrl_o.dat'length));             -- 
          when c_stall_observation_interval_RW  => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_stall_observation_interval), ctrl_o.dat'length));               -- 
          when c_stall_stat_select_RW           => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_stall_stat_select), ctrl_o.dat'length));                        -- 
          when c_stall_streak_max_GET           => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_stall_streak_max), ctrl_o.dat'length));                         -- 
          when c_stall_cnt_GET                  => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_stall_cnt), ctrl_o.dat'length));                                -- 
          when c_stall_max_ts_GET_1             => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_stall_max_ts(63 downto 32)), ctrl_o.dat'length));               -- 
          when c_stall_max_ts_GET_0             => ctrl_o.dat <= std_logic_vector(resize(unsigned(r_stall_max_ts(31 downto 0)), ctrl_o.dat'length));                -- 
          when others                           => ctrl_o.dat <= (others => 'X');
        end case;

        
      end if; -- rst
    end if; -- clk edge
  end process;

end rtl;
