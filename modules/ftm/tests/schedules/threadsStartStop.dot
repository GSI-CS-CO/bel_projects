digraph threadsStartStop {
// Thread 0 assigns TmsgX and BlockX to thread 1,2,3 and starts these.
// then start pattern B (Tmsg4 and Block4) to show that this does not stop the other threads.
// Stop pattern A1 which stops thread 1
// Stop pattern A which stops thread 3
// Stop node Block2 which stops thread 2 (there is no pattern on this thread)

node [cpu=0 fid=1 toffs=0]
edge [type=defdst]

Tmsg0 [type=tmsg par=0 pattern=A patentry=1]
// offset 1ms
Tmsg1 [type=tmsg par=1 toffs=1000000 pattern=A1 patentry=1]
// offset 2ms
Tmsg2 [type=tmsg par=2 toffs=2000000]
// offset 3ms
Tmsg3 [type=tmsg par=3 toffs=3000000 pattern=A]
Tmsg4 [type=tmsg par=4 pattern=B patentry=1]

Origin1 [type=origin thread=1]
Origin2 [type=origin thread=2]
Origin3 [type=origin thread=3]

// the blocks are 10ms long.
// most blocks have a low prio queue to enable stop command.
Block0 [type=block tperiod=10000000 pattern=A]
Block1 [type=block tperiod=10000000 pattern=A1 patexit=1 qlo=1]
Block2 [type=block tperiod=10000000 patexit=1 qlo=1]
Block3 [type=block tperiod=10000000 pattern=A patexit=1 qlo=1]
Block4 [type=block tperiod=10000000 pattern=B patexit=1 qlo=1]

Startthread1 [type=startthread thread=1 startoffs=0]
Startthread2 [type=startthread thread=2 startoffs=0]
Startthread3 [type=startthread thread=3 startoffs=0]

// sequence to start threads 1,2,3
Tmsg0 -> Origin1 -> Startthread1 -> Origin2 -> Startthread2 -> Origin3 -> Startthread3 -> Block0
// loop on thread 1
Tmsg1 -> Block1 -> Tmsg1
// loop on thread 2
Tmsg2 -> Block2 -> Tmsg2
// loop on thread 3
Tmsg3 -> Block3 -> Tmsg3
// extra pattern B
Tmsg4 -> Block4

Origin1 -> Tmsg1 [type=origindst]
Origin2 -> Tmsg2 [type=origindst]
Origin3 -> Tmsg3 [type=origindst]
}
